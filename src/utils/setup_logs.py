import os
import shutil
from pathlib import Path
import logging

def setup_log_structure():
    """Set up the log management directory structure"""
    # Create base directory
    log_dir = Path("log_management")
    log_dir.mkdir(exist_ok=True)
    
    # Create component subdirectories
    components = [
        "airflow", "fastapi", "streamlit", "postgres", 
        "minio", "system", "crawlers", "ml", "api",
        "analyses", "stock_data", "dag_runs"
    ]
    
    for component in components:
        comp_dir = log_dir / component
        comp_dir.mkdir(exist_ok=True)
        
        # Create a placeholder .gitkeep to ensure directory is tracked
        gitkeep = comp_dir / ".gitkeep"
        if not gitkeep.exists():
            gitkeep.touch()
    
    # Create a README file explaining the log structure
    readme_path = log_dir / "README.md"
    with open(readme_path, "w") as f:
        f.write("""# Log Management

This directory contains centralized logs and data history for the Data Platform.

## Directory Structure

- `airflow/` - Logs from Airflow tasks and scheduler
- `fastapi/` - API server logs
- `streamlit/` - UI application logs
- `postgres/` - Database logs
- `minio/` - Storage logs
- `system/` - System and general application logs
- `crawlers/` - Data crawler logs
- `ml/` - Machine learning model logs
- `api/` - API service logs
- `analyses/` - Stock analyses generated by the AI
- `stock_data/` - Logs of crawled stock data
- `dag_runs/` - History of DAG runs and their results

## Log Rotation

Logs are automatically rotated and old logs (>30 days) can be cleaned with:

```bash
./manage.sh logs-cleanup
```
""")
    
    print("âœ… Log management directory structure created successfully!")
    print("NOTE: All logs are now stored in the log_management directory.")
    
    return log_dir

if __name__ == "__main__":
    log_dir = setup_log_structure()
    print(f"Log management directory created at: {log_dir.absolute()}")
