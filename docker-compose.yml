version: '3.8'

services:
  # Database
  postgres:
    image: ankane/pgvector:latest
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./src/db:/docker-entrypoint-initdb.d
      - ./log_management/postgres:/var/log/postgresql
    ports:
      - "5433:5432"
    networks:
      - dataplatform

  # Object Storage
  minio:
    image: minio/minio:latest
    container_name: minio
    restart: always
    command: server --console-address ":9001" /data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - ./data/minio:/data
    ports:
      - "9000:9000"  # API access
      - "9001:9001"  # Web console
    networks:
      - dataplatform

  # API Service
  api:
    build:
      context: .
      dockerfile: docker/api.Dockerfile
    container_name: fastapi
    restart: always
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src
      - ./log_management:/app/log_management
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_CONNECTION_STRING=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_URL=${GEMINI_URL}
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
    env_file:
      - .env
    depends_on:
      - postgres
      - minio
    networks:
      - dataplatform

  # UI Service
  ui:
    build:
      context: .
      dockerfile: docker/ui.Dockerfile
    container_name: streamlit
    restart: always
    ports:
      - "8501:8501"
    volumes:
      - ./src:/app/src
      - ./log_management/analyses:/app/volume/analyses
      - ./.streamlit:/root/.streamlit
      - ./log_management:/app/log_management
    environment:
      - POSTGRES_CONNECTION_STRING=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_URL=${GEMINI_URL}
      - PYTHONPATH=/app
    env_file:
      - .env
    depends_on:
      - api
    networks:
      - dataplatform

  # Airflow services - đơn giản hóa
  airflow-webserver:
    image: apache/airflow:2.7.1
    container_name: airflow-webserver
    restart: always
    depends_on:
      - postgres
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${AIRFLOW_DB}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "false"
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      AIRFLOW__API__AUTH_BACKENDS: "airflow.api.auth.backend.session, airflow.api.auth.backend.basic_auth"
      AIRFLOW_USERNAME: ${AIRFLOW_USER}
      AIRFLOW_PASSWORD: ${AIRFLOW_PASSWORD}
      _AIRFLOW_DB_MIGRATE: "true"
      PYTHONPATH: ${PYTHONPATH:-/opt/airflow}:/opt/airflow/src
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
    volumes:
      - ./src/dags:/opt/airflow/dags
      - ./src:/opt/airflow/src
      - ./log_management/airflow:/opt/airflow/logs
      - ./volume/airflow/plugins:/opt/airflow/plugins
      - ./logs:/opt/airflow/logs/app_logs  # Thêm volume cho logs
    ports:
      - "8080:8080"
    command: >
      bash -c "airflow db init && 
      airflow users create -r Admin -u $${AIRFLOW_USERNAME} -p $${AIRFLOW_PASSWORD} -e admin@example.com -f Admin -l User &&
      airflow webserver"
    networks:
      - dataplatform

  # Scheduler
  airflow-scheduler:
    image: apache/airflow:2.7.1
    container_name: airflow-scheduler
    restart: always
    depends_on:
      - airflow-webserver
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${AIRFLOW_DB}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "false"
      AIRFLOW__CORE__LOAD_EXAMPLES: "false"
      PYTHONPATH: ${PYTHONPATH:-/opt/airflow}:/opt/airflow/src
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
    volumes:
      - ./src/dags:/opt/airflow/dags
      - ./src:/opt/airflow/src
      - ./log_management/airflow:/opt/airflow/logs
      - ./volume/airflow/plugins:/opt/airflow/plugins
      - ./logs:/opt/airflow/logs/app_logs  # Thêm volume cho logs
    command: scheduler
    networks:
      - dataplatform

networks:
  dataplatform:
    driver: bridge